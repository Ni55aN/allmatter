{"version":3,"sources":["webpack:///./node_modules/texturity.js/src/framebuffer.js","webpack:///./node_modules/texturity.js/src/generators/brick.js","webpack:///./node_modules/texturity.js/src/generators/transform.js","webpack:///./node_modules/texturity.js/src/index.js","webpack:///./node_modules/texturity.js/src/shader-manager.js","webpack:///./node_modules/texturity.js/src/shaders/chunks/color-models.js","webpack:///./node_modules/texturity.js/src/shaders/chunks/gray.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/circle.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/convolution.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/image.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/noise.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/normal.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/radial-gradient.js","webpack:///./node_modules/texturity.js/src/shaders/precompiled/simple.js","webpack:///./node_modules/texturity.js/src/shaders/runtime/blend.js","webpack:///./node_modules/texturity.js/src/shaders/runtime/fourier.js","webpack:///./node_modules/texturity.js/src/shaders/runtime/neighbors.js"],"names":[],"mappings":";;;;;;AAAO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;AACA,CAAC;AAAA;AAAA;;;;;;;;;ACpDc;;AAEf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,YAAY;AACnC,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,C;;;;;;;;AC3Be;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB,kBAAkB;AAC1C,4BAA4B,kBAAkB;AAC9C;AACA;;AAEA;AACA;AACA;AACA;;AAEA,C;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6C;AACE;AACC;AACQ;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;;AAEP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,sEAAkB;;AAE9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,4BAA4B,kEAAc;AAC1C;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,E;;AAET;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA,2C;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qBAAqB,sEAAgB;;AAErC,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,qBAAqB,sEAAgB;;AAErC;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS,E;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AAAA;AAAA;;AAEM;AACP;;AAEA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEO;AACP;AACA;;AAEO,kDAAkD;AACzD;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,6C;;AAEA,wBAAwB,gEAAa;AACrC;AACA;;AAEA;AACA;;AAEO;AACP;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEO;AACP;AACA;;AAEA;AACA;AACA;;AAEO;AACP;;AAEA;;AAEA;AACA,iD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;;AAEA;AACA,C;;;;;;;;ACnbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACI;AACI;;AAEF;AACU;AACZ;AACA;AACE;AACiB;AACjB;;AAEnC;AACf;AACA;AACA;;AAEA;AACA;AACA,YAAY,oFAAM;AAClB,YAAY,oFAAM;AAClB,YAAY,8FAAW;AACvB,YAAY,oFAAM;AAClB,YAAY,kFAAK;AACjB,YAAY,kFAAK;AACjB,YAAY,qGAAc;AAC1B;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAsB,kD;AACtB,8BAA8B,4BAA4B,KAAK,OAAO;AACtE;AACA;;AAEA;AACA;AACA,4CAA4C,+EAAK;;AAEjD;AACA,4CAA4C,iFAAO;;AAEnD;AACA,4CAA4C,mFAAS;;AAErD;AACA;AACA,C;;;;;;;;ACrFe;;AAEf;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wC;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,0FAA0F;AAC1F;;AAEA;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,C;;;;;;;;ACzEe;AACf;AACA;AACA,KAAK;AACL,C;;;;;;;;ACJe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,C;;;;;;;;ACpBe;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,KAAK;AAC9B,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI;AAC5B;;AAEA;AACA,SAAS;AACT,CAAC;;;;;;;;;ACvCc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,CAAC;;;;;;;;;ACnBc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;ACjFc;AACf;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;AAGA;;AAEA,SAAS;AACT,CAAC;;;;;;;;;ACzCc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,CAAC;;;;;;;;;ACrBc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;AACT,CAAC;;;;;;;;;AChBD;AAAA;AAAsD;AACf;;AAExB;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA,UAAU,6EAAgB;AAC1B,UAAU,qEAAS;;AAEnB;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA,cAAc;AACd,kCAAkC,WAAW;AAC7C,SAAS;AACT;AACA,C;;;;;;;;ACvCA;AAAsC;;AAEvB;;AAEf;AACA;;AAEA,+B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA,wBAAwB;AACxB,wBAAwB;AACxB;AACA,mCAAmC,EAAE,GAAG,EAAE;;AAE1C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,UAAU,qEAAS;;AAEnB;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B,OAAO;AACjC,8BAA8B,OAAO;AACrC;AACA;AACA,sBAAsB;AACtB;AACA,kBAAkB;AAClB,aAAa;AACb;AACA,C;;;;;;;;ACtEe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,KAAK;AAC9B,6BAA6B,KAAK;AAClC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA,SAAS;AACT;AACA,CAAC","file":"texturity.js","sourcesContent":["export class FloatFrameBuffer {\n    \n    constructor(gl, w, h) {\n        this.gl = gl;\n        this.w = w;\n        this.h = h;\n\n        this.framebuffer = this.initFB();\n    }\n\n    result() {\n        var gl = this.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(this.framebuffer.buffer);\n\n        return this.framebuffer.texture;\n    }\n\n    initFB() {\n        var gl = this.gl;\n\n        if (!(gl instanceof WebGL2RenderingContext)) throw new Error('Need webgl 2');\n        //gl.getExtension('OES_texture_float_linear');\n        var ext = gl.getExtension('EXT_color_buffer_float');\n    \n        if (!ext) \n            throw new Error('no EXT_color_buffer_float');\n        \n        var buffer = gl.createFramebuffer();\n    \n        gl.bindFramebuffer(gl.FRAMEBUFFER, buffer);\n    \n        var texture = gl.createTexture();\n        \n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA16F, this.w, this.h, 0, gl.RGBA, gl.FLOAT, null);\n    \n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n        \n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    \n        var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    \n        if (status != gl.FRAMEBUFFER_COMPLETE) \n            alert('can not render to floating point textures');\n        \n        return { buffer, texture };\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/framebuffer.js\n// module id = ./node_modules/texturity.js/src/framebuffer.js\n// module chunks = 1","export default class {\n    \n    constructor(count, margin) {\n        this.count = count;\n        this.margin = margin;\n    }\n\n    getBricks(w, h) {\n        var bricks = [];\n        var ly = this.count * 2;\n\n        var m = this.margin / ly;\n        var mw = Math.round(m * w);\n        var mh = Math.round(m * h);\n        \n        for (var y = 0; y < ly * 2; y++)\n            for (var x = 0, lx = ly / 2 + y % 2; x < lx; x++) {\n                var hd = h / ly;\n                var wd = w / ly * 2;\n                var oy = y * hd;\n                var ox = y % 2 * (-wd / 2) + x * wd;\n                \n                bricks.push([ox + mw, oy + mh, wd - 2 * mw, hd - 2 * mh]);\n            }\n        return bricks;\n    }\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/generators/brick.js\n// module id = ./node_modules/texturity.js/src/generators/brick.js\n// module chunks = 1","export default class {\n    \n    constructor(tx, ty, repeat) {\n        this.tx = tx;\n        this.ty = ty;\n        this.repeat = repeat;\n    }\n\n    getRects(w, h) {\n        var rects = [];\n\n        var tx = this.tx % 1;\n        var ty = this.ty % 1;\n        var dw = w / (this.repeat + 1);\n        var dh = h / (this.repeat + 1);\n\n        for (var x = -1; x <= this.repeat; x++)\n            for (var y = -1; y <= this.repeat; y++) {\n                var px = x * dw + tx * dw;\n                var py = y * dh + ty * dh;\n\n                rects.push([px, py, dw, dh]);\n            }\n        return rects;\n    }\n\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/generators/transform.js\n// module id = ./node_modules/texturity.js/src/generators/transform.js\n// module chunks = 1","import ShaderManager from './shader-manager';\nimport {FloatFrameBuffer} from './framebuffer';\nimport BrickGenerator from './generators/brick';\nimport TransformGenerator from './generators/transform';\n\nvar gl = null;\nvar element = null;\nvar programs = null;\nvar vertexBuffer = null;\nvar textures = [];\nvar format = null\nvar shaderManager = null;\n\nexport class Canvas {\n\n    constructor(w, h, clearColor = [0.0, 0.0, 0.0, 1.0]) {\n        this.w = w;\n        this.h = h;\n        this.backup = null;\n        \n        gl = initGL();\n        gl.clearColor(...clearColor);\n            \n        resize(w, h);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n\n    save() {\n        this.backup = {\n            texture: this.toTexture(),\n            width: element.width,\n            height: element.height\n        };\n        return this;\n    }\n\n    restore() {\n        if (!this.backup) throw 'nothing to restore';\n\n        var w = this.backup.width;\n        var h = this.backup.height;\n\n        resize(w, h);\n        this.drawTexture(this.backup.texture, 0, 0, w, h);\n\n        this.backup = null;\n\n        return this;\n    }\n\t\n    drawBuffer(vertices) {\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n        gl.drawArrays(gl.TRIANGLES, 0, vertices.length / 2);\n        return this;\n    }\n\n    transform(texture, tx, ty, repeat) {\n        var generator = new TransformGenerator(tx, ty, repeat);\n\n        var rects = generator.getRects(this.w, this.h);\n\n        this.drawTexture(texture, rects);\n        return this;\n    }\n\n    drawRect(x, y, w, h) {\n        this.drawBuffer([x, y,\n            x + w, y,\n            x + w, y + h,\n            x + w, y + h,\n            x, y + h,\n            x, y]);\n        return this;\n    }\n\t\n    drawRadialGradient(color1, color2) {\n        useProgram(programs.radialGradient);\n        gl.uniform3fv(gl.getUniformLocation(programs.radialGradient, 'color1'), color1);\n        gl.uniform3fv(gl.getUniformLocation(programs.radialGradient, 'color2'), color2);\n        this.drawRect(0, 0, this.w, this.h);\n        useProgram(programs.simple);\n        \n        return this;\n    }\n\n    drawBricks(count, margin) {\n        this.fillStyle([0, 0, 0, 1]);\n        this.drawRect(0, 0, this.w, this.h);\n        this.fillStyle([1, 1, 1, 1]);\n\n        var generator = new BrickGenerator(count, margin);\n        var bricks = generator.getBricks(this.w, this.h);\n\n        bricks.forEach(r => this.drawRect(...r));\n        \n        return this;\n    }\n\n    drawCircle(r) {\n        useProgram(programs.circle);\n        gl.uniform1f(gl.getUniformLocation(programs.circle, 'r'), r);\n        \n        this.drawRect(0, 0, this.w, this.h);\n        useProgram(programs.simple);\n        \n        return this;\n    }\n\n    drawTexture(texture, x, y, w, h, params = [], uvs = null) {\n        useProgram(programs.image);\n        var uvBuffer = gl.createBuffer();\n\n        uvs = uvs || [0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1];\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, uvBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(uvs), gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(1);\n        gl.vertexAttribPointer(1, 2, gl.FLOAT, false, 0, 0);\n\t\t\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.enableVertexAttribArray(0);\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        params.forEach(param => {\n            gl.texParameteri(gl.TEXTURE_2D, param[0], param[1]);\n        });    \n\n        if (x instanceof Array)\n            x.forEach(r => this.drawRect(...r));\n        else\n        \tthis.drawRect(x, y, w, h);\n        gl.disableVertexAttribArray(1);\n\n        useProgram(programs.simple);\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n        gl.deleteBuffer(uvBuffer);\n  \n        return this;\n    }\n\n    fillStyle(color) {\n        var colorLoc = gl.getUniformLocation(programs.simple, 'color');\n\n        gl.uniform4fv(colorLoc, color);\n\n        return this;\n    }\n\n    noise() {\n        useProgram(programs.noise);\n        gl.uniform1f(gl.getUniformLocation(programs.noise, 'seed'), Math.random());\n\n        this.drawBuffer([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]);\n\n        useProgram(programs.simple);\n\n        return this;\n    }\n\t\n    blur(texture, iterations) {\n        iterations = Math.min(iterations, 100);\n        var kernel = new Array(9).fill(1 / 9);\n        var currentTexture = texture;\n\n        for (var i = 0; i < iterations; i++) {\n            this.convolution(currentTexture, kernel)\n            if (i > 0)\n                disposeTexture(currentTexture)\n            if (i + 1 < iterations)\n                currentTexture = this.toTexture();\n        }\n        return this;\n    }\n\n    convolution(texture, matrix) {\n        if (!(gl instanceof WebGL2RenderingContext)) throw new Error('Supported only in webgl 2');\n\n        useProgram(programs.convolution);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.uniform1i(gl.getUniformLocation(programs.convolution, 'texture'), texture);\n        gl.uniform1fv(gl.getUniformLocation(programs.convolution, 'matrix'),\n            new Float32Array(matrix));\n        \n        this.drawBuffer([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]);\n        \n        useProgram(programs.simple);\n        return this;\n    }\n\n    blend(texture, b, expression, preExpressions = '') {\n        var blendProgram = shaderManager.createShaderRuntime('blend', b, expression, preExpressions);\n\n        useProgram(blendProgram);\n        \n        if (b instanceof WebGLTexture) {\n            var tex2 = b;\n\n            gl.activeTexture(gl.TEXTURE0);\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.activeTexture(gl.TEXTURE1);\n            gl.bindTexture(gl.TEXTURE_2D, tex2);\n            gl.uniform1i(gl.getUniformLocation(blendProgram, 'texture1'), 0);\n            gl.uniform1i(gl.getUniformLocation(blendProgram, 'texture2'), 1);\n        } else if (b instanceof Array) {\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.uniform1i(gl.getUniformLocation(blendProgram, 'texture1'), 0);\n            gl.uniform3fv(gl.getUniformLocation(blendProgram, 'color'), b);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, texture);\n            gl.uniform1i(gl.getUniformLocation(blendProgram, 'texture1'), 0);\n            gl.uniform1f(gl.getUniformLocation(blendProgram, 'value'), b);\n        }\n        this.drawBuffer([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]);\n\n        useProgram(programs.simple);\n        gl.activeTexture(gl.TEXTURE0);\n        gl.deleteProgram(blendProgram);\n        \n        return this;\n    }\n\n    neighbors(texture, expression) {\n        var neighborsProgram = shaderManager.createShaderRuntime('neighbors', expression);\n        \n        useProgram(neighborsProgram);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.uniform1i(gl.getUniformLocation(neighborsProgram, 'tex'), 0);\n\n        this.drawBuffer([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]);\n\n        useProgram(programs.simple);\n        gl.deleteProgram(neighborsProgram);  \n    }\n\n    drawFourierSpectrum(texture) {\n       \n        this.blend(texture, element.width * element.height, 'vec3(a.z/sqrt(b+a.z*a.z))');\n        var uv = \n        [\n            -0.5, 0.5,\n            0.5, 0.5,\n            0.5, -0.5,\n            \n            0.5, -0.5,\n            -0.5, -0.5,\n            -0.5, 0.5\n        ]\n        var params = [[gl.TEXTURE_WRAP_T, gl.REPEAT], [gl.TEXTURE_WRAP_S, gl.REPEAT]];\n\n        texture = this.toTexture();\n        this.drawTexture(texture, 0, 0, element.width, element.height, params, uv)\n        gl.deleteTexture(texture);\n\n        return this;\n    }\n\n    fourierFilter(texture, mask) {\n        var fb = new FloatFrameBuffer(gl, element.width, element.height);\n        \n        if (mask instanceof WebGLTexture) { /// shift mask\n            var uv =\n                    [\n                        -0.5, 0.5,\n                        0.5, 0.5,\n                        0.5, -0.5,\n            \n                        0.5, -0.5,\n                        -0.5, -0.5,\n                        -0.5, 0.5\n                    ]\n            var params = [[gl.TEXTURE_WRAP_T, gl.REPEAT], [gl.TEXTURE_WRAP_S, gl.REPEAT]];\n\n            this.drawTexture(mask, 0, 0, element.width, element.height, params, uv)\n            gl.deleteTexture(mask);\n            mask = this.toTexture();\n        }\n\n        this.blend(texture, mask, 'vec3(a.rg*b.r,a.b)');\n\n        return fb.result();\n    }\n\n    fourierTransform(texture, inverse = false) {\n        var fb = new FloatFrameBuffer(gl, element.width, element.height);\n\n        var fourier = shaderManager.createShaderRuntime('fourier', this.w, this.h, inverse);\n\n        useProgram(fourier);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        this.drawRect(0, 0, this.w, this.h);\n\n        return fb.result();\n    }\n\n    normalMap(texture, scale) {\n        useProgram(programs.normal);\n        gl.uniform1f(gl.getUniformLocation(programs.normal, 'scale'), scale);\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n\n        this.drawBuffer([-1, -1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1]);\n\n        useProgram(programs.simple);\n        \n        return this;\n    }\n\n    toTexture() {\n        var texture = gl.createTexture();\n\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texImage2D(gl.TEXTURE_2D, 0, format, element.width, element.height, 0, format, gl.UNSIGNED_BYTE, null);\n        gl.copyTexImage2D(gl.TEXTURE_2D, 0, format, 0, 0, element.width, element.height, 0);\n\n        textures.push(texture);\n        return texture;\n    }\n\n    toSrc() {\n        return element.toDataURL('image/png');\n    }\n\n    async toSrcAsync() {\n        return new Promise(resolve => {\n            element.toBlob((blob) => {\n                resolve(URL.createObjectURL(blob))\n            }, 'image/png');\n        });    \n    }\n    \n    async toImage() {\n        var canv = this;\n\n        return new Promise(function (resolve) {\n            var img = new Image();\n\n            img.onload = () => {\n                resolve(img);\n            };\n            img.src = canv.toSrc();\n        });\n    }\n\n    toImageSync() {\n        var img = new Image();\n\n        img.src = this.toSrc();\n        return img;\n    }\n}\n\nexport function disposeTexture(texture) {\n    var index = textures.indexOf(texture);\n\n    if (index !==-1)\n        textures.splice(index, 1);\n    gl.deleteTexture(texture);\n}\n\nexport function disposeTextures() {\n    textures.forEach(disposeTexture);\n}\n\nexport function getGL() {\n    return gl;\n}\n\nexport function initGL(contextName = 'webgl', params = {}) {\n    if (gl) return gl;\n  \n    params = Object.assign({\n        alpha: false,\n        antialias: false,\n        depth: false\n    }, params);\n\n    element = document.createElement('canvas');\n    gl = element.getContext(contextName, params);\n    format = params.alpha ? gl.RGBA : gl.RGB; \n\n    shaderManager = new ShaderManager(gl);\n    programs = shaderManager.createPrecompiledShaders();\n    vertexBuffer = createBuffer();\n\n    return gl;\n}\n\nexport function createBuffer() {\n    var buffer = gl.createBuffer();\n    \n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    \n    var posAttr = gl.getAttribLocation(programs.simple, 'position');\n    \n    gl.enableVertexAttribArray(posAttr);\n    gl.vertexAttribPointer(posAttr, 2, gl.FLOAT, false, 0, 0);\n    \n    return buffer;\n}\n\nexport function resize(w, h) {\n    element.width = w;\n    element.height = h;\n    \n    gl.viewport(0, 0, w, h);\n    useProgram(programs.simple);\n}\n\nexport function loadTexture(img) {\n    if (!(img instanceof Image)) throw 'argument should be instance of Image';\n    \n    var tex = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, tex);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true); \n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texImage2D(gl.TEXTURE_2D, 0, format, format, gl.UNSIGNED_BYTE, img);\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    return tex;\n}\n\nexport function useProgram(program) {\n    gl.useProgram(program);\n    var resolLoc = gl.getUniformLocation(program, 'resolution');\n\n    gl.uniform2fv(resolLoc, [element.width, element.height]);\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/index.js\n// module id = ./node_modules/texturity.js/src/index.js\n// module chunks = 1","import blend from './shaders/runtime/blend';\nimport fourier from './shaders/runtime/fourier';\nimport neighbors from './shaders/runtime/neighbors';\n\nimport circle from './shaders/precompiled/circle';\nimport convolution from './shaders/precompiled/convolution';\nimport image from './shaders/precompiled/image';\nimport noise from './shaders/precompiled/noise';\nimport normal from './shaders/precompiled/normal';\nimport radialGradient from './shaders/precompiled/radial-gradient';\nimport simple from './shaders/precompiled/simple';\n\nexport default class {\n    constructor(gl) {\n        this.gl = gl;\n    }\n\n    createPrecompiledShaders() {\n        var precompiled = {\n            simple,\n            normal,\n            convolution,\n            circle,\n            image,\n            noise,\n            radialGradient\n        };\n\n        Object.keys(precompiled).forEach(key => {\n            var sources = precompiled[key];\n\n            try {\n                precompiled[key] = this.createShaderProgram(sources);\n            } catch (e) {\n                console.warn(e);\n            }\n        });\n        return precompiled;\n    }\n\n    createShaderProgram(sources) {\n        var gl = this.gl;\n        var vertShader = this.createShader(sources.vertex, gl.VERTEX_SHADER);\n        var fragShader = this.createShader(sources.fragment, gl.FRAGMENT_SHADER);\n        var shaderProgram = gl.createProgram();\n    \n        gl.attachShader(shaderProgram, vertShader);\n        gl.attachShader(shaderProgram, fragShader);\n        gl.linkProgram(shaderProgram);\n        gl.validateProgram(shaderProgram);\n        if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n            var info = gl.getProgramInfoLog(shaderProgram);\n    \n            throw new Error('Could not compile WebGL program. \\n\\n' + info);\n        }\n        return shaderProgram;\n    }\n\n    createShader(source, type) {\n        var gl = this.gl;\n        var shader = gl.createShader(type);\n    \n        gl.shaderSource(shader, source);\n        gl.compileShader(shader);\n        var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    \n        if (!success)\n            throw `could not compile \n                    ${type === gl.VERTEX_SHADER ? 'vertex' : 'fragment'} \n                    shader: ${gl.getShaderInfoLog(shader)}\\n ${source}`;\n        return shader;\n    }\n\n    createShaderRuntime(name, ...args) {\n        if (name === 'blend')\n            return this.createShaderProgram(blend(...args));\n        \n        if (name === 'fourier')\n            return this.createShaderProgram(fourier(...args));\n        \n        if (name === 'neighbors')\n            return this.createShaderProgram(neighbors(...args));\n            \n        throw new Error('Shader program not registered');\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shader-manager.js\n// module id = ./node_modules/texturity.js/src/shader-manager.js\n// module chunks = 1","export default function () {\n    \n    return `\n    vec3 hsl2rgb( in vec3 c )\n    {\n        vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n        \n        return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n    }\n        \n    vec3 HueShift (in vec3 Color, in float Shift)\n    {\n        vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n            \n        vec3 U = Color-P;\n            \n        vec3 V = cross(vec3(0.55735),U);    \n        \n        Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n            \n        return vec3(Color);\n    }\n        \n    vec3 rgb2hsl( in vec3 c ){\n        float h = 0.0;\n        float s = 0.0;\n        float l = 0.0;\n        float r = c.r;\n        float g = c.g;\n        float b = c.b;\n        float cMin = min( r, min( g, b ) );\n        float cMax = max( r, max( g, b ) );\n        \n        l = ( cMax + cMin ) / 2.0;\n        if ( cMax > cMin ) {\n            float cDelta = cMax - cMin;\n                \n            //s = l < .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original\n            s = l < .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );\n           \n            if ( r == cMax ) {\n                h = ( g - b ) / cDelta;\n            } else if ( g == cMax ) {\n                h = 2.0 + ( b - r ) / cDelta;\n            } else {\n                h = 4.0 + ( r - g ) / cDelta;\n            }\n    \n            if ( h < 0.0) {\n                h += 6.0;\n            }\n            h = h / 6.0;\n        }\n        return vec3( h, s, l );\n    }\n        \n    vec3 rgb2hsv(vec3 c)\n    {\n        vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n        vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n        vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n        \n        float d = q.x - min(q.w, q.y);\n        float e = 1.0e-10;\n        return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n    }\n        \n    vec3 hsv2rgb(vec3 c)\n    {\n       vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n        vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n        return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n    }`\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/chunks/color-models.js\n// module id = ./node_modules/texturity.js/src/shaders/chunks/color-models.js\n// module chunks = 1","export default function() {\n    return `float gray(vec3 c){\n        return dot(c,vec3(0.299, 0.587, 0.114));\n    }`;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/chunks/gray.js\n// module id = ./node_modules/texturity.js/src/shaders/chunks/gray.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        uniform vec2 resolution;\n        varying lowp vec2 coord;\n        void main(void) {\n            vec2 np = position/resolution;\n            np.x=np.x*2.0-1.0;\n            np.y=1.0-np.y*2.0;\n            coord = np;\n            gl_Position = vec4(np, 0.0, 1.0);\n        }`,\n    fragment: `\n        varying lowp vec2 coord;\n        uniform mediump float r;\n        void main(void) {\n            lowp float inten = sqrt(coord.x*coord.x+coord.y*coord.y);\n            lowp vec3 color = vec3(distance(coord,vec2(0.0,0.0))<r?1.0:0.0);\n            gl_FragColor = vec4(color,1.0);\n        }`\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/circle.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/circle.js\n// module chunks = 1","export default {\n    vertex: `#version 300 es\n\n        precision mediump float;\n        in vec2 position;\n        uniform vec2 resolution;\n        void main(void) {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n        `,\n    fragment: `#version 300 es\n        precision mediump float;\n\n        uniform sampler2D tex;\n        uniform vec2 resolution;\n        uniform float matrix[9];\n\n        void getDataMatrix(sampler2D t, vec2 c, out vec3 arr[9]){\n            int i=0;\n            for(int x=-1;x<=1;x++)\n                for(int y=-1;y<=1;y++){\n                    vec2 offset = vec2(x,y)/resolution;\n                    arr[i] = texture(t,c+offset).rgb;\n                    i=i+1;\n            }\n        }\n\n        out vec4 FragColor;\n\n        void main(void) {\n            vec2 texcoord = gl_FragCoord.xy/resolution;\n            vec3 arr[9];\n            getDataMatrix(tex, texcoord, arr);\n            vec3 color = vec3(0.0);\n            for(int i=0;i<9;i++)\n             color = color + arr[i]*matrix[i];\n\n            FragColor = vec4(color, 1.0);\n        }`\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/convolution.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/convolution.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        attribute vec2 uv;\n        uniform vec2 resolution;\n        varying mediump vec2 texcoord;\n        void main(void) {\n            vec2 np = position/resolution;\n            np.x=np.x*2.0-1.0;\n            np.y=1.0-np.y*2.0;\n            texcoord = uv;\n            gl_Position = vec4(np, 0.0, 1.0);\n        }`,\n    fragment: `\n        varying mediump vec2 texcoord;\n        uniform sampler2D texture;\n        void main(void) {\n            gl_FragColor = vec4(texture2D(texture, texcoord).rgb,1.0);\n        }`\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/image.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/image.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        varying lowp vec2 pos;\n        void main(void) {\n            pos = position;\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    `,\n    fragment: `\n        #ifdef GL_ES\n        precision mediump float;\n        #endif\n        uniform vec2 resolution;\n        varying lowp vec2 pos;\n        uniform lowp float seed;\n\n        vec4 mod289(vec4 x)\n        {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n        \n        vec4 permute(vec4 x)\n        {\n          return mod289(((x*34.0)+2.0)*x);\n        }\n        \n        vec4 taylorInvSqrt(vec4 r)\n        {\n          return 1.79284291400159 - 0.85373472095314 * r;\n        }\n        \n        vec2 fade(vec2 t) {\n          return t*t*t*(t*(t*6.0-15.0)+10.0);\n        }\n        \n        // Classic Perlin noise\n        float cnoise(vec2 P)\n        {\n          vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n          vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n          Pi = mod289(Pi); // To avoid truncation effects in permutation\n          vec4 ix = Pi.xzxz;\n          vec4 iy = Pi.yyww;\n          vec4 fx = Pf.xzxz;\n          vec4 fy = Pf.yyww;\n        \n          vec4 i = permute(permute(ix) + iy);\n        \n          vec4 gx = fract((seed/4.0+0.4)*i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n          vec4 gy = abs(gx) - 0.5 ;\n          vec4 tx = floor(gx + 0.5);\n          gx = gx - tx;\n        \n          vec2 g00 = vec2(gx.x,gy.x);\n          vec2 g10 = vec2(gx.y,gy.y);\n          vec2 g01 = vec2(gx.z,gy.z);\n          vec2 g11 = vec2(gx.w,gy.w);\n        \n          vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n          g00 *= norm.x;\n          g01 *= norm.y;\n          g10 *= norm.z;\n          g11 *= norm.w;\n        \n          float n00 = dot(g00, vec2(fx.x, fy.x));\n          float n10 = dot(g10, vec2(fx.y, fy.y));\n          float n01 = dot(g01, vec2(fx.z, fy.z));\n          float n11 = dot(g11, vec2(fx.w, fy.w));\n        \n          vec2 fade_xy = fade(Pf.xy);\n          vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n          float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n          return 2.3 * n_xy;\n        }\n        \n        void main(void){\n            float noise = cnoise(pos*10.0);\n            gl_FragColor = vec4(noise,noise,noise,1.0);\n        }\n    `\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/noise.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/noise.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        varying mediump vec2 texcoord;\n        void main(void) {\n            texcoord = (position+1.0)/2.0;\n            gl_Position = vec4(position, 0.0, 1.0);\n        }`,\n    fragment:`\n        uniform lowp vec2 resolution;\n        varying mediump vec2 texcoord;\n        uniform sampler2D texture;\n        uniform mediump float scale;\n\n        lowp float grey(vec3 color){\n            return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n        }\n\n        void main(void) {\n            lowp float PIXEL_WIDTH = 1.0/resolution.x;\n            lowp float PIXEL_HEIGHT = 1.0/resolution.y;\n            lowp float c = grey(texture2D(texture, texcoord).rgb);\n            lowp float cx = grey(texture2D(texture, texcoord+vec2(PIXEL_WIDTH, 0.0)).rgb);\n            lowp float cy = grey(texture2D(texture, texcoord+vec2(0.0, PIXEL_HEIGHT)).rgb);\n\n\n            lowp float dx = (c - cx) * scale;\n            lowp float dy = (c - cy) * scale;\n            lowp float nz = 1.0;\n            lowp float len = sqrt(dx * dx + dy * dy + nz * nz);\n\n            lowp float nx = dx / len;\n            lowp float ny = -dy / len;\n            nz = nz / len;\n\n            lowp vec3 r = (vec3(nx, ny, nz)+1.0)/2.0;\n\n\n            gl_FragColor = vec4(r,1.0);\n            \n        }`\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/normal.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/normal.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        uniform vec2 resolution;\n        varying lowp vec2 coord;\n        void main(void) {\n            vec2 np = position/resolution;\n            np.x=np.x*2.0-1.0;\n            np.y=1.0-np.y*2.0;\n            coord = np;\n            gl_Position = vec4(np, 0.0, 1.0);\n        }`,\n    fragment: `\n        varying lowp vec2 coord;\n        uniform mediump vec3 color1;\n        uniform mediump vec3 color2;\n        void main(void) {\n            lowp float inten = sqrt(coord.x*coord.x+coord.y*coord.y);\n            mediump vec3 color = color1 * inten + color2 * (1.0 - inten);\n            gl_FragColor = vec4(color,1.0);\n        }`\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/radial-gradient.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/radial-gradient.js\n// module chunks = 1","export default {\n    vertex: `\n        attribute vec2 position;\n        uniform vec2 resolution;\n        void main(void) {\n            vec2 np = position/resolution;\n            np.x=np.x*2.0-1.0;\n            np.y=1.0-np.y*2.0;\n            gl_Position = vec4(np, 0.0, 1.0);\n        }`,\n\n    fragment: `\n        uniform mediump vec4 color;\n        void main(void) {\n            gl_FragColor = color;\n        }`\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/precompiled/simple.js\n// module id = ./node_modules/texturity.js/src/shaders/precompiled/simple.js\n// module chunks = 1","import colorModelsChunk from '../chunks/color-models';\nimport grayChunk from '../chunks/gray';\n\nexport default function (b, expression, preExpressions = '') {\n    return {\n        vertex: `\n        attribute vec2 position;\n        varying mediump vec2 texcoord;\n        void main(void) {\n            texcoord = (position+1.0)/2.0;\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n        `,\n        fragment: `\n        #ifdef GL_ES\n        precision mediump float;\n        #endif\n        varying mediump vec2 texcoord;\n        uniform sampler2D texture1;\n        ${b instanceof WebGLTexture ?\n        'uniform sampler2D texture2'\n        : (b instanceof Array ?\n            'uniform mediump vec3 color'\n            : 'uniform mediump float value')};\n        \n        ${colorModelsChunk()}\n        ${grayChunk()}\n\n        void main(void) {\n            vec3 a = texture2D(texture1, texcoord).rgb;\n            vec3 b = ${b instanceof WebGLTexture ?\n        'texture2D(texture2, texcoord).rgb'\n        : (b instanceof Array ?\n            'color'\n            : 'vec3(value)')};\n            ${preExpressions}\n            gl_FragColor = vec4(${expression}, 1.0);\n        }`\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/runtime/blend.js\n// module id = ./node_modules/texturity.js/src/shaders/runtime/blend.js\n// module chunks = 1","import grayChunk from '../chunks/gray'\n\nexport default function (w, h, inverse) {\n    \n    var assign = `\n    float gray = texture2D(texture, (coord+offset)/screen).r;\n\n    real += gray * cos(-angle); \n    imag += gray * sin(-angle);\n    `;\n    var fragColor = `\n    gl_FragColor = vec4(real,imag,magnitude(real,imag),1.0);\n    `;\n\n    var inverseAssign = `vec2 source = texture2D(texture, (coord+offset)/screen).rg;\n    real += source.r * cos(angle) - source.g * sin(angle);\n    imag += source.r * sin(angle) + source.g * cos(angle);`;\n    var inverseFragColor = `\n    real = real / screen.x / screen.y;\n    gl_FragColor = vec4(vec3(real),1.0);`;\n\n    return {\n        vertex: `\n        precision highp float;\n\n        attribute vec2 position;\n        uniform vec2 resolution;\n        void main(void) {\n            vec2 np = position/resolution;\n            np.x=np.x*2.0-1.0;\n            np.y=1.0-np.y*2.0;\n            gl_Position = vec4(np, 0.0, 1.0);\n        }`,\n        fragment: `\n        precision highp float;\n\n        const int W = ${w};\n        const int H = ${h};\n        const float M_PI = 3.1415926535897932384626433832795;\n        const vec2 screen = vec2(${w},${h});\n\n        uniform sampler2D texture;\n        uniform vec2 resolution;\n\n        float magnitude(float real, float imag){\n            return sqrt(real*real+imag*imag);\n        }\n\n        float phase(float real, float imag){\n            return atan(real*real+imag*imag);\n        }\n\n        ${grayChunk()}\n        \n        void main(void) {\n            float real = 0.0;\n            float imag = 0.0;\n            vec2 offset = vec2(0.5,0.5);\n            float x = gl_FragCoord.x-offset.x;\n            float y = gl_FragCoord.y-offset.y;\n\n            for(int j = 0; j < H; j++)\n                for(int i = 0; i < W; i++){\n                    vec2 coord = vec2(float(i),float(j));\n                    float angle = 2.0*M_PI*(x*coord.x/screen.x+y*coord.y/screen.y);\n                    ${inverse ? inverseAssign : assign}\n                }\n                ${inverse ? inverseFragColor : fragColor}\n            }`\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/runtime/fourier.js\n// module id = ./node_modules/texturity.js/src/shaders/runtime/fourier.js\n// module chunks = 1","export default function(expression) {\n    return {\n        vertex: `#version 300 es\n\n        precision mediump float;\n        in vec2 position;\n        uniform vec2 resolution;\n        void main(void) {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n        `,\n        fragment: `#version 300 es\n        precision mediump float;\n\n        uniform sampler2D tex;\n        uniform vec2 resolution;\n        uniform float matrix[9];\n\n        void getDataMatrix(sampler2D t, vec2 c, out vec3 arr[9]){\n            int i=0;\n            for(int x=-1;x<=1;x++)\n                for(int y=-1;y<=1;y++){\n                    vec2 offset = vec2(x,y)/resolution;\n                    arr[i] = texture(t,c+offset).rgb;\n                    i=i+1;\n            }\n        }\n\n        out vec4 FragColor;\n\n        void main(void) {\n            vec2 texcoord = gl_FragCoord.xy/resolution;\n            vec3 arr[9];\n            getDataMatrix(tex, texcoord, arr);\n            \n            vec3 color = vec3(0.0);\n            ${expression};\n            FragColor = vec4(color, 1.0);\n        }`\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/texturity.js/src/shaders/runtime/neighbors.js\n// module id = ./node_modules/texturity.js/src/shaders/runtime/neighbors.js\n// module chunks = 1"],"sourceRoot":""}